package toy;

/**
 *
 * @author  Bambang Hariyanto,Ir.MT
 * Inspired by :
 *  Data structures and program design in Pascal
 *  Larry Nyhoff - Sanford Leestma, page 75
 *  Exersize 15
 */

/*
 * BigIntegerToy.java
 *
 * Created on May 18, 2003, 8:11 AM
 */

public class BigIntegerToy {
    private int[] digits;
    private int length = 0;
    private int modPerCell = 1000;
    
    /** Creates a new instance of BigIntegerToy */
    public BigIntegerToy() {
    }
    
    public BigIntegerToy(int[] digits)throws Exception{
        if (digits == null || digits.length <1) throw (new Exception("Array harus berisi"));
        if (digits[0] == 0) throw (new Exception("Digit pertama tidak boleh nol"));
        setDigits(digits);
        length = digits.length;
    }
    
    public BigIntegerToy(int length){
        this.length = length;
        digits = new int[length];
        for (int i=0;i<length;i++) digits[i] = 0;
    }
    
    public void setLength(int length) {
        this.length = length;
    }
    
    public int getLength() {
        return length;
    }
    
    public void setMod(int modPerCell){
        this.modPerCell = modPerCell;
    }
    
    public void setDigits(int[] digits) {
        this.digits = new int[digits.length];
        for (int i=0;i<digits.length;i++) this.digits[i] = digits[digits.length-1-i];
    }
    
    public BigIntegerToy add(BigIntegerToy a){
        BigIntegerToy t;
        int carry = 0;
        if(a.length > this.length) {
            t = new BigIntegerToy(a.length+1);
            t.digits[0] = (this.digits[0] + a.digits[0]) % modPerCell;
            carry = (this.digits[0] + a.digits[0]) / modPerCell;
            for (int i=1;i<this.length;i++) {
                t.digits[i] = (this.digits[i] + a.digits[i] + carry) % modPerCell;
                carry = (this.digits[i] + a.digits[i] + carry) / modPerCell;
            }
            for (int i=this.length;i<a.length;i++) {
                t.digits[i] = (a.digits[i] + carry) % modPerCell;
                carry = (a.digits[i] + carry) / modPerCell;
            }
            t.digits[t.digits.length-1] = carry;
        } else {
            t = new BigIntegerToy(this.length+1);
            t.digits[0] = (this.digits[0] + a.digits[0]) % modPerCell;
            carry = (this.digits[0] + a.digits[0]) / modPerCell;
            for (int i=1;i<a.length;i++) {
                t.digits[i] = (this.digits[i] + a.digits[i] + carry) % modPerCell;
                carry = (this.digits[i] + a.digits[i] + carry) / modPerCell;
            }
            for (int i=a.length;i<this.length;i++) {
                t.digits[i] = (this.digits[i] + carry) % modPerCell;
                carry = (this.digits[i] + carry) / modPerCell;
            }
        };
        
        if (t.digits[t.length-1] == 0) {
           BigIntegerToy t2 = new BigIntegerToy(t.length-1);
           for (int i=0;i<t2.length;i++) t2.digits[i] = t.digits[i];
           t = t2;
        }
        return t;
    }
    
    public void printDigits(){
        System.out.print(digits[digits.length-1]);
        if (digits.length >2) {
            for(int i=digits.length-2;i>=0;i--){
                System.out.print(".");
                if (digits[i]==0 ) System.out.print("000");
                else if (digits[i]<10) System.out.print("00");
                else if (digits[i]<100) System.out.print("0");
                if (digits[i] != 0) System.out.print(digits[i]);
            }
        }
        System.out.println();
    }
    
    static void test()throws Exception {
        int[] digitsA = {179, 534, 672, 198};
        BigIntegerToy a = new BigIntegerToy(digitsA);
        a.printDigits();
        System.out.println();
        int[] digitsB = {1, 0, 0, 0, 0, 0, 0, 0, 0};
        BigIntegerToy b = new BigIntegerToy(digitsB);
        b.printDigits();
        BigIntegerToy c = a.add(b); 
        System.out.println("A+B =");
        c.printDigits();
        int[] digitsC = {1};
        BigIntegerToy d = new BigIntegerToy(digitsC);
        d.printDigits();
        try{
            BigIntegerToy e = new BigIntegerToy(null);
        } catch (Exception e) {
            System.out.println(e);
        }
    }
    
    public static void main(String[] args) throws Exception{
        test();
    }
    
}
